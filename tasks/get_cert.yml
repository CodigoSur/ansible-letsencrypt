---
  - name: "{{ letsencrypt_cert.domains[0] }}: Ensure webroot exists"
    file: path="{{ letsencrypt_webroot_path }}" state=directory
    become: yes

  - name: "{{ letsencrypt_cert.domains[0] }}: Attempt to get the certificate using the webroot authenticator"
    command: "{{ letsencrypt_command }} -a webroot --webroot-path {{ letsencrypt_webroot_path }} certonly"
    become: yes
    args:
      creates: "/etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}"
    when: letsencrypt_authenticator == "webroot"
    ignore_errors: True

  - name: "{{ letsencrypt_cert.domains[0] }}: Attempt to get the certificate using the standalone authenticator (in case eg the webserver isn't running yet)"
    command: "{{ letsencrypt_command }} -a standalone auth"
    become: yes
    args:
      creates: "/etc/letsencrypt/live/{{ letsencrypt_cert.domains[0] }}"

  - name: "{{ letsencrypt_cert.domains[0] }}: Check if renewal file was created"
    file: dest="{{ letsencrypt_renewal_file }}" state=file
    register: letsencrypt_renewal_file_exists

  - name: "{{ letsencrypt_cert.domains[0] }}: Fix the renewal file"
    ini_file: section=renewalparams option={{ item.key }} value={{ item.value }} dest="{{ letsencrypt_renewal_file }}"
    when: letsencrypt_renewal_file_exists
    become: yes
    with_dict:
      os_packages_only: False
      verb: certonly
      noninteractive_mode: False
      uir: False
      hsts: False
      authenticator: '{{ letsencrypt_authenticator }}'

  - name: "{{ letsencrypt_cert.domains[0] }}: Fix the webroot map in the renewal file"
    ini_file: section="[webroot_map]" option={{ item }} value={{ letsencrypt_webroot_path }} dest="{{ letsencrypt_renewal_file }}"
    when: letsencrypt_renewal_file_exists
    become: yes
    with_items: "{{ letsencrypt_cert.domains }}"
